import os
import sqlite3
import telebot
import requests
import asyncio
from datetime import datetime, timedelta

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "0"))
PRICE_RUB = 199
DB_PATH = "vpn_bot.db"

bot = telebot.TeleBot(BOT_TOKEN)

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT UNIQUE,
            subscription TEXT,
            access_url TEXT,
            server TEXT,
            reminder_sent BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT,
            plan TEXT,
            amount INTEGER,
            paid BOOLEAN DEFAULT 0,
            server TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS servers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            location TEXT UNIQUE,
            api_url TEXT
        );
    ''')
    conn.commit()
    conn.close()

init_db()

def create_outline_key(api_url):
    try:
        response = requests.post(f"{api_url}/access-keys", timeout=10)
        response.raise_for_status()
        key_data = response.json()
        return key_data.get("accessUrl", "")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:", e)
        return None

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VPN. –í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: /myvpn")

@bot.message_handler(commands=["buy"])
def handle_buy(message):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT location FROM servers")
    locations = c.fetchall()
    conn.close()

    if not locations:
        bot.send_message(message.chat.id, "–°–µ—Ä–≤–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    markup = telebot.types.InlineKeyboardMarkup()
    for loc in locations:
        markup.add(telebot.types.InlineKeyboardButton(f"{loc[0]}", callback_data=f"region_{loc[0]}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("region_"))
def handle_location_selection(call):
    location = call.data.split("_")[1]
    chat_id = call.message.chat.id

    markup = telebot.types.InlineKeyboardMarkup()
    pay_url = "https://yoomoney.ru"
    markup.add(telebot.types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url))

    message_text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {location}\n"
        f"üí∞ –¶–µ–Ω–∞: {PRICE_RUB}‚ÇΩ\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
    )
    bot.send_message(chat_id, message_text, reply_markup=markup)

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO payments (chat_id, plan, amount, server) VALUES (?, ?, ?, ?)",
              (str(chat_id), "–ú–µ—Å—è—Ü", PRICE_RUB, location))
    conn.commit()
    conn.close()

@bot.message_handler(commands=["confirm"])
def confirm_payment(message):
    chat_id = str(message.chat.id)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id, server FROM payments WHERE chat_id=? AND paid=0 ORDER BY created_at DESC LIMIT 1", (chat_id,))
    row = c.fetchone()

    if not row:
        bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        conn.close()
        return

    payment_id, location = row
    c.execute("SELECT api_url FROM servers WHERE location=?", (location,))
    server_row = c.fetchone()

    if not server_row:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞.")
        conn.close()
        return

    api_url = server_row[0]
    access_url = create_outline_key(api_url)
    if not access_url:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        conn.close()
        return

    subscription_date = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    c.execute("INSERT OR REPLACE INTO users (chat_id, subscription, access_url, server, reminder_sent) VALUES (?, ?, ?, ?, 0)",
              (chat_id, subscription_date, access_url, location))
    c.execute("UPDATE payments SET paid=1 WHERE id=?", (payment_id,))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüîó –í–∞—à –∫–ª—é—á:\n`{access_url}`", parse_mode="Markdown")
    bot.send_message(ADMIN_CHAT_ID, f"‚úÖ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç {chat_id}, —Ä–µ–≥–∏–æ–Ω: {location}")

@bot.message_handler(commands=["myvpn"])
def handle_myvpn(message):
    chat_id = str(message.chat.id)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT subscription, access_url, server FROM users WHERE chat_id=?", (chat_id,))
    row = c.fetchone()
    conn.close()

    if not row:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    subscription, access_url, server = row
    text = (
        f"üåç –°–µ—Ä–≤–µ—Ä: {server}\n"
        f"üîó –°—Å—ã–ª–∫–∞: `{access_url}`\n"
        f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {subscription}"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

async def subscription_checker():
    while True:
        now = datetime.now()
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()

        c.execute("SELECT chat_id, subscription, reminder_sent FROM users WHERE subscription IS NOT NULL")
        for chat_id, sub_date, reminder_sent in c.fetchall():
            try:
                sub_dt = datetime.strptime(sub_date, "%Y-%m-%d")
                if sub_dt - now <= timedelta(days=2) and not reminder_sent:
                    bot.send_message(chat_id, f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {sub_date}. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ.")
                    c.execute("UPDATE users SET reminder_sent=1 WHERE chat_id=?", (chat_id,))
            except:
                continue

        c.execute("SELECT chat_id, subscription FROM users")
        for chat_id, sub_date in c.fetchall():
            try:
                if datetime.strptime(sub_date, "%Y-%m-%d") < now:
                    bot.send_message(chat_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω.")
                    bot.send_message(ADMIN_CHAT_ID, f"‚õî –ö–ª–∏–µ–Ω—Ç {chat_id} —É–¥–∞–ª—ë–Ω (—Å—Ä–æ–∫ –∏—Å—Ç—ë–∫).")
                    c.execute("DELETE FROM users WHERE chat_id=?", (chat_id,))
            except:
                continue

        conn.commit()
        conn.close()
        await asyncio.sleep(86400)

async def main():
    asyncio.create_task(subscription_checker())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.polling(non_stop=True)

if __name__ == "__main__":
    asyncio.run(main())

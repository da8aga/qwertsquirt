#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sqlite3
import telebot
import requests
import asyncio
from datetime import datetime, timedelta

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN     = os.environ.get("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "0"))
PRICE_RUB     = 199
DB_PATH       = "vpn_bot.db"

bot = telebot.TeleBot(BOT_TOKEN)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT UNIQUE,
            subscription TEXT,
            access_url TEXT,
            server TEXT,
            reminder_sent BOOLEAN DEFAULT 0,
            referrer_id TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT,
            plan TEXT,
            amount INTEGER,
            paid BOOLEAN DEFAULT 0,
            server TEXT,
            access_url TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS servers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            location TEXT UNIQUE,
            api_url TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS commissions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            referrer_id TEXT,
            referee_id TEXT,
            amount INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS withdrawals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT,
            amount INTEGER,
            method TEXT,
            account TEXT,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def create_outline_key(api_url):
    try:
        r = requests.post(f"{api_url}/access-keys", timeout=10, verify=False)
        r.raise_for_status()
        data = r.json()
        print("‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω:", data, flush=True)
        return data.get("accessUrl", "")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:", e, flush=True)
        return None

def add_user_if_not_exists(chat_id, referrer_id=None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT 1 FROM users WHERE chat_id=?", (chat_id,))
    if not c.fetchone():
        c.execute("INSERT INTO users (chat_id, referrer_id) VALUES (?, ?)", (chat_id, referrer_id))
        conn.commit()
    conn.close()

def get_balance(chat_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT COALESCE(SUM(amount),0) FROM commissions WHERE referrer_id=?", (chat_id,))
    total_comm = c.fetchone()[0]
    c.execute("SELECT COALESCE(SUM(amount),0) FROM withdrawals WHERE chat_id=? AND status='paid'", (chat_id,))
    total_with = c.fetchone()[0]
    conn.close()
    return total_comm, total_with

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=["start"])
def handle_start(message):
    chat_id = str(message.chat.id)
    args = message.text.split()
    ref_id = None
    if len(args) > 1 and args[1].startswith("ref"):
        ref = args[1][3:]
        if ref != chat_id:
            ref_id = ref
    add_user_if_not_exists(chat_id, referrer_id=ref_id)
    bot.send_message(chat_id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VPN.\n"
        "–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: /myvpn\n"
        "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: /referral")

@bot.message_handler(commands=["referral"])
def send_referral(message):
    chat_id = message.chat.id
    link = f"https://t.me/{bot.get_me().username}?start=ref{chat_id}"
    bot.send_message(chat_id, f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}")

@bot.message_handler(commands=["buy"])
def handle_buy(message):
    chat_id = message.chat.id
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT location FROM servers")
    rows = c.fetchall()
    conn.close()

    if not rows:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    markup = telebot.types.InlineKeyboardMarkup()
    for (loc,) in rows:
        markup.add(telebot.types.InlineKeyboardButton(loc, callback_data=f"region_{loc}"))
    bot.send_message(chat_id, f"üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω VPN (—Ü–µ–Ω–∞ {PRICE_RUB}‚ÇΩ):", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("region_"))
def handle_region(call):
    loc = call.data.split("_",1)[1]
    chat_id = call.message.chat.id

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO payments (chat_id, plan, amount, server) VALUES (?, ?, ?, ?)",
              (str(chat_id), "–ú–µ—Å—è—Ü", PRICE_RUB, loc))
    conn.commit()
    conn.close()

    pay_markup = telebot.types.InlineKeyboardMarkup()
    pay_markup.add(telebot.types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://yoomoney.ru"))
    bot.send_message(chat_id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ **{loc}**\nüí∞ –¶–µ–Ω–∞: {PRICE_RUB}‚ÇΩ\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        parse_mode="Markdown", reply_markup=pay_markup)

@bot.message_handler(commands=["confirm"])
def confirm_payment(message):
    chat_id = str(message.chat.id)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id, server FROM payments WHERE chat_id=? AND paid=0 ORDER BY created_at DESC LIMIT 1",
              (chat_id,))
    row = c.fetchone()
    if not row:
        bot.send_message(chat_id, "‚ùó –ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        conn.close()
        return

    pay_id, loc = row
    c.execute("SELECT api_url FROM servers WHERE location=?", (loc,))
    srv = c.fetchone()
    if not srv:
        bot.send_message(chat_id, "‚ùó –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return
    api_url = srv[0]

    key = create_outline_key(api_url)
    if not key:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        conn.close()
        return

    sub_date = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    c.execute("""INSERT OR REPLACE INTO users
                 (chat_id, subscription, access_url, server, reminder_sent)
                 VALUES (?, ?, ?, ?, 0)""",
              (chat_id, sub_date, key, loc))
    c.execute("UPDATE payments SET paid=1, access_url=? WHERE id=?", (key, pay_id))

    c.execute("SELECT referrer_id FROM users WHERE chat_id=?", (chat_id,))
    ref = c.fetchone()
    if ref and ref[0]:
        comm = int(PRICE_RUB * 0.2)
        c.execute("INSERT INTO commissions (referrer_id, referee_id, amount) VALUES (?, ?, ?)",
                  (ref[0], chat_id, comm))
        bot.send_message(int(ref[0]),
                         f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {chat_id} –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É! –í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è: {comm}‚ÇΩ")

    conn.commit()
    conn.close()

    bot.send_message(chat_id,
                     f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüîó –í–∞—à –∫–ª—é—á:\n`{key}`",
                     parse_mode="Markdown")
    bot.send_message(ADMIN_CHAT_ID,
                     f"‚úÖ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç {chat_id}, —Ä–µ–≥–∏–æ–Ω: {loc}")

@bot.message_handler(commands=["myvpn"])
def handle_myvpn(message):
    chat_id = str(message.chat.id)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT subscription, access_url, server FROM users WHERE chat_id=?", (chat_id,))
    row = c.fetchone()
    conn.close()
    if not row:
        bot.send_message(chat_id, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        return
    sub, url, srv = row
    bot.send_message(chat_id,
                     f"üåç –†–µ–≥–∏–æ–Ω: {srv}\nüîó –°—Å—ã–ª–∫–∞: `{url}`\n‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {sub}",
                     parse_mode="Markdown")

@bot.message_handler(commands=["balance"])
def handle_balance(message):
    chat_id = str(message.chat.id)
    total_comm, total_with = get_balance(chat_id)
    avail = total_comm - total_with
    bot.send_message(chat_id,
                     f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_comm}‚ÇΩ\n"
                     f"üí∏ –í—ã–≤–µ–¥–µ–Ω–æ: {total_with}‚ÇΩ\n"
                     f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {avail}‚ÇΩ")

@bot.message_handler(commands=["withdraw"])
def handle_withdraw(message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /withdraw <—Å—É–º–º–∞> <—Å—á–µ—Ç>")
        return
    chat_id = str(message.chat.id)
    try:
        amount = int(parts[1])
    except:
        bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    account = parts[2]
    total_comm, total_with = get_balance(chat_id)
    avail = total_comm - total_with
    if amount > avail:
        bot.send_message(message.chat.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {avail}‚ÇΩ")
        return
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO withdrawals (chat_id, amount, method, account) VALUES (?, ?, ?, ?)",
              (chat_id, amount, "manual", account))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id,
                     f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚ÇΩ –ø—Ä–∏–Ω—è—Ç–∞.\n–°—á–µ—Ç: {account}")

@bot.message_handler(commands=["keys"])
def list_keys(message):
    chat_id = str(message.chat.id)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""SELECT access_url, server, created_at
                 FROM payments
                 WHERE chat_id=? AND paid=1
                 ORDER BY created_at DESC""", (chat_id,))
    rows = c.fetchall()
    conn.close()
    if not rows:
        bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.")
        return
    text = "üîë *–í–∞—à–∏ VPN-–∫–ª—é—á–∏:*\n\n"
    for url, srv, dt in rows:
        date = dt.split()[0]
        text += f"‚Ä¢ {srv} ({date}): `{url}`\n"
    bot.send_message(chat_id, text, parse_mode="Markdown")

async def subscription_checker():
    while True:
        now = datetime.now()
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT chat_id, subscription, reminder_sent FROM users WHERE subscription IS NOT NULL")
        for cid, sub, sent in c.fetchall():
            try:
                dt = datetime.strptime(sub, "%Y-%m-%d")
                if (dt - now).days <= 2 and not sent:
                    bot.send_message(cid, f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {sub}. –ü—Ä–æ–¥–ª–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ.")
                    c.execute("UPDATE users SET reminder_sent=1 WHERE chat_id=?", (cid,))
            except:
                pass
        c.execute("SELECT chat_id, subscription, server FROM users")
        for cid, sub, srv in c.fetchall():
            try:
                if datetime.strptime(sub, "%Y-%m-%d") < now:
                    bot.send_message(cid, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –¥–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω.")
                    bot.send_message(ADMIN_CHAT_ID, f"‚õî –ö–ª–∏–µ–Ω—Ç {cid} –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç {srv}.")
                    c.execute("DELETE FROM users WHERE chat_id=?", (cid,))
            except:
                pass
        conn.commit()
        conn.close()
        await asyncio.sleep(86400)

async def main():
    asyncio.create_task(subscription_checker())
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.polling(non_stop=True)

if __name__ == "__main__":
    asyncio.run(main())

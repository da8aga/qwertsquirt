#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sqlite3
import telebot
import requests
import asyncio
from datetime import datetime, timedelta

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN     = os.environ.get("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "0"))
PRICE_RUB     = 199
DB_PATH       = "vpn_bot.db"

bot = telebot.TeleBot(BOT_TOKEN)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∏–≥—Ä–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id             INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id        TEXT UNIQUE,
            subscription   TEXT,
            access_url     TEXT,
            server         TEXT,
            referral_code  TEXT,
            referred_by    TEXT,
            reminder_sent  BOOLEAN DEFAULT 0,
            created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ''')
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É balance, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    c.execute("PRAGMA table_info(users);")
    cols = [r[1] for r in c.fetchall()]
    if "balance" not in cols:
        c.execute("ALTER TABLE users ADD COLUMN balance INTEGER DEFAULT 0;")
    # –¢–∞–±–ª–∏—Ü–∞ –æ–ø–ª–∞—Ç
    c.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id         INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id    TEXT,
            plan       TEXT,
            amount     INTEGER,
            paid       BOOLEAN DEFAULT 0,
            server     TEXT,
            access_url TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
    c.execute('''
        CREATE TABLE IF NOT EXISTS servers (
            id       INTEGER PRIMARY KEY AUTOINCREMENT,
            location TEXT UNIQUE,
            api_url  TEXT
        );
    ''')
    conn.commit()
    conn.close()

init_db()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ---
def create_outline_key(api_url):
    try:
        r = requests.post(f"{api_url}/access-keys", verify=False, timeout=10)
        r.raise_for_status()
        return r.json().get("accessUrl", "")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:", e)
        return None

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
@bot.message_handler(commands=["start", "help"])
def cmd_start(message):
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "/buy      ‚Äì –∫—É–ø–∏—Ç—å VPN\n"
        "/myvpn    ‚Äì –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "/keys     ‚Äì —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π\n"
        "/balance  ‚Äì –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤\n"
        "/withdraw ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥\n"
        "/referral ‚Äì —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
    )

@bot.message_handler(commands=["buy"])
def cmd_buy(message):
    conn = sqlite3.connect(DB_PATH)
    rows = conn.cursor().execute("SELECT location FROM servers").fetchall()
    conn.close()
    if not rows:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –°–µ—Ä–≤–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    markup = telebot.types.InlineKeyboardMarkup()
    for (loc,) in rows:
        markup.add(telebot.types.InlineKeyboardButton(loc, callback_data=f"region_{loc}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("region_"))
def cmd_region(call):
    loc = call.data.split("_",1)[1]
    chat_id = call.message.chat.id
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {loc}\n"
        f"üí∞ –¶–µ–Ω–∞: {PRICE_RUB}‚ÇΩ\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –∑–∞—Ç–µ–º /confirm"
    )
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://yoomoney.ru"))
    bot.send_message(chat_id, text, reply_markup=markup)
    conn = sqlite3.connect(DB_PATH)
    conn.cursor().execute(
        "INSERT INTO payments (chat_id, plan, amount, server) VALUES (?,?,?,?)",
        (str(chat_id), "–ú–µ—Å—è—Ü", PRICE_RUB, loc)
    )
    conn.commit()
    conn.close()

@bot.message_handler(commands=["confirm"])
def cmd_confirm(message):
    chat_id = str(message.chat.id)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        "SELECT id, server FROM payments WHERE chat_id=? AND paid=0 ORDER BY created_at DESC LIMIT 1",
        (chat_id,)
    )
    row = c.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        conn.close()
        return
    pay_id, loc = row
    c.execute("SELECT api_url FROM servers WHERE location=?", (loc,))
    srv = c.fetchone()
    if not srv:
        bot.send_message(message.chat.id, "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return
    api_url = srv[0]
    key = create_outline_key(api_url)
    if not key:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞.")
        conn.close()
        return
    sub = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute(
        "INSERT OR REPLACE INTO users (chat_id, subscription, access_url, server, reminder_sent) VALUES (?,?,?,?,0)",
        (chat_id, sub, key, loc)
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç—ë–∂
    c.execute("UPDATE payments SET paid=1, access_url=? WHERE id=?", (key, pay_id))
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
    c.execute("SELECT referred_by FROM users WHERE chat_id=?", (chat_id,))
    ref = c.fetchone()[0]
    if ref:
        bonus = int(PRICE_RUB * 0.2)
        c.execute("UPDATE users SET balance = balance + ? WHERE chat_id=?", (bonus, ref))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ!\\nüîë `{key}`", parse_mode="Markdown")
    bot.send_message(ADMIN_CHAT_ID, f"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç {chat_id}, —Ä–µ–≥–∏–æ–Ω {loc}")

@bot.message_handler(commands=["myvpn"])
def cmd_myvpn(message):
    chat_id = str(message.chat.id)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(
        "SELECT subscription, access_url, server FROM users WHERE chat_id=?",
        (chat_id,)
    )
    row = c.fetchone()
    conn.close()
    if not row:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.")
        return
    sub, key, loc = row
    bot.send_message(
        message.chat.id,
        f"üåç {loc}\\nüîë `{key}`\\n‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {sub}",
        parse_mode="Markdown"
    )

@bot.message_handler(commands=["keys"])
def cmd_keys(message):
    chat_id = str(message.chat.id)
    conn = sqlite3.connect(DB_PATH)
    rows = conn.cursor().execute(
        "SELECT access_url, server, created_at FROM payments WHERE chat_id=? AND paid=1 ORDER BY created_at DESC",
        (chat_id,)
    ).fetchall()
    conn.close()
    if not rows:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π.")
        return
    for key, srv, dt in rows:
        bot.send_message(
            message.chat.id,
            f"üåç {srv} ‚Äî `{key}`\\nüìÖ {dt[:10]}",
            parse_mode="Markdown"
        )

@bot.message_handler(commands=["balance"])
def cmd_balance(message):
    chat_id = str(message.chat.id)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT balance FROM users WHERE chat_id=?", (chat_id,))
    bal = c.fetchone()
    conn.close()
    bot.send_message(message.chat.id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal[0] if bal else 0}‚ÇΩ")

@bot.message_handler(commands=["withdraw"])
def cmd_withdraw(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@bot.message_handler(commands=["referral"])
def cmd_referral(message):
    chat_id = str(message.chat.id)
    link = f"https://t.me/{bot.get_me().username}?start={chat_id}"
    conn = sqlite3.connect(DB_PATH)
    conn.cursor().execute(
        "UPDATE users SET referral_code=? WHERE chat_id=?", (chat_id, chat_id)
    )
    conn.commit()
    conn.close()
    bot.send_message(
        message.chat.id,
        f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\\n{link}\\n20% –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ!"
    )

async def subscription_checker():
    while True:
        now = datetime.now()
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT chat_id, subscription, reminder_sent FROM users WHERE subscription IS NOT NULL")
        for chat_id, sub_date, rem in c.fetchall():
            try:
                dt = datetime.strptime(sub_date, "%Y-%m-%d")
                if dt - now <= timedelta(days=2) and not rem:
                    bot.send_message(chat_id, f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {sub_date}")
                    c.execute("UPDATE users SET reminder_sent=1 WHERE chat_id=?", (chat_id,))
                if dt < now:
                    bot.send_message(chat_id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                    c.execute("DELETE FROM users WHERE chat_id=?", (chat_id,))
            except:
                pass
        conn.commit()
        conn.close()
        await asyncio.sleep(86400)

async def main():
    asyncio.create_task(subscription_checker())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.polling(non_stop=True)

if __name__ == "__main__":
    asyncio.run(main())

import telebot
import os
import json
import time
import asyncio
from datetime import datetime, timedelta
import requests

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "0"))
PRICE_RUB = 199  # —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö

bot = telebot.TeleBot(BOT_TOKEN)

# --- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ---
def load_data():
    try:
        with open("data.json", "r") as f:
            return json.load(f)
    except:
        return {"servers": {}, "users": {}, "pending_payments": {}}

def save_data(data):
    with open("data.json", "w") as f:
        json.dump(data, f, indent=2)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ Outline —á–µ—Ä–µ–∑ HTTP ---
def create_outline_key(location):
    data = load_data()
    server = data["servers"].get(location)
    if not server:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä {location} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    api_url = server["outline_api_url"].rstrip("/")
    try:
        requests.post(f"{api_url}/access-keys", verify=False, timeout=10)
        keys = requests.get(f"{api_url}/access-keys", verify=False, timeout=10).json()
        if isinstance(keys, list) and keys:
            return keys[-1]["accessUrl"]
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Outline: {e}")
        return None

# --- –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª—é—á–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
def add_user_subscription(chat_id, access_url, server_name, duration_days=7):
    data = load_data()
    data["users"][str(chat_id)] = {
        "subscription": (datetime.utcnow() + timedelta(days=duration_days)).strftime("%Y-%m-%d"),
        "access_url": access_url,
        "server": server_name,
        "reminder_sent": False
    }
    save_data(data)

# --- –ö–æ–º–∞–Ω–¥–∞ /myvpn ---
@bot.message_handler(commands=["myvpn"])
def handle_myvpn(message):
    chat_id = str(message.chat.id)
    data = load_data()
    user = data["users"].get(chat_id)
    if not user:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    text = (
        f"üåç –°–µ—Ä–≤–µ—Ä: {user['server']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: `{user['access_url']}`\n"
        f"‚è≥ –î–æ: {user['subscription']}`"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

# --- –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ---
async def auto_cleanup_expired_keys():
    while True:
        data = load_data()
        now = datetime.utcnow().date()
        changed = False
        for chat_id, user in list(data["users"].items()):
            try:
                sub_date = datetime.strptime(user["subscription"], "%Y-%m-%d").date()
                if sub_date < now:
                    api_url = data["servers"][user["server"]]["outline_api_url"].rstrip("/")
                    if "access-keys/" in user["access_url"]:
                        key_id = user["access_url"].split("access-keys/")[-1]
                        requests.delete(f"{api_url}/access-keys/{key_id}", verify=False)
                    del data["users"][chat_id]
                    changed = True
            except:
                continue
        if changed:
            save_data(data)
        await asyncio.sleep(3600)

# --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VPN.
–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: /myvpn")

@bot.message_handler(commands=["buy"])
def buy_key(message):
    data = load_data()
    markup = telebot.types.InlineKeyboardMarkup()
    for location in data.get("servers", {}).keys():
        markup.add(telebot.types.InlineKeyboardButton(location, callback_data=f"buy_{location}"))
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {PRICE_RUB}‚ÇΩ", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def handle_location_selection(call):
    location = call.data.split("_")[1]
    chat_id = call.message.chat.id

    # –ó–¥–µ—Å—å –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ –æ–ø–ª–∞—Ç—É
    markup = telebot.types.InlineKeyboardMarkup()
    fake_pay_url = "https://yoomoney.ru"  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ñ–µ–π–∫–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
    markup.add(telebot.types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=fake_pay_url))
    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω: {location}
–¶–µ–Ω–∞: {PRICE_RUB}‚ÇΩ
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

    # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å redirect_url –æ—Ç –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(auto_cleanup_expired_keys())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.polling(non_stop=True)

if __name__ == "__main__":
    asyncio.run(main())
